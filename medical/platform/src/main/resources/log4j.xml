<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j='http://jakarta.apache.org/log4j/'>
	<!--
	%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。
	%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。
	%r：输出自应用程序启动到输出该log信息耗费的毫秒数。
	%t：输出产生该日志事件的线程名。
	%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。
	%c：输出日志信息所属的类目，通常就是所在类的全名。
	%M：输出产生日志信息的方法名。
	%F：输出日志消息产生时所在的文件名称。
	%L:：输出代码中的行号。
	%m:：输出代码中指定的具体日志信息。
	%n：输出一个回车换行符，Windows平台为"rn"，Unix平台为"n"。
	%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。
	%%：输出一个"%"字符。
	另外，还可以在%与格式字符之间加上修饰符来控制其最小长度、最大长度、和文本的对齐方式。如：
		1) c：指定输出category的名称，最小的长度是20，如果category的名称长度小于20的话，默认的情况下右对齐。
		2)%-20c："-"号表示左对齐。
		3)%.30c：指定输出category的名称，最大的长度是30，如果category的名称长度大于30的话，就会将左边多出的字符截掉，但小于30的话也不会补空格。 
	-->
		
	<!-- 控制台日志配置 -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-d{yyyy-MM-dd HH:mm:ss} [%p] [%c{3}.%M:%L] %m%n" />
		</layout>
	</appender>

	<!-- info级别日志控制 -->
	<appender name="info" class="org.apache.log4j.DailyRollingFileAppender">
		<!-- 文件路径 -->
		<param name="File" value="${catalina.home}/logs/platform/info.log" />
		<!-- 是否追加 -->
		<param name="Append" value="true" />
		<!-- 最低日志级别 -->
		<param name="Threshold" value="INFO" />
		<!-- 回滚日志后缀 -->
		<param name="datePattern" value="'.'yyyy-MM-dd" />
		<!-- 是否启用缓冲 当缓冲区数据达到一定大小再写入文件 默认8K -->
		<!-- <param name="BufferedIO" value="true"/> <param name="BufferSize" value="8192"/> -->
		<!-- 日志输出布局 -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-d{yyyy-MM-dd HH:mm:ss} [%p] [%c.%M:%L] %m%n" />
		</layout>
		<!--限制输出级别 -->
		<filter class="org.apache.log4j.varia.LevelRangeFilter">
			<!-- 最小级别 -->
			<param name="LevelMax" value="INFO" />
			<!-- 最大级别 -->
			<param name="LevelMin" value="INFO" />
		</filter>
	</appender>

	<!-- warn级别日志控制 -->
	<appender name="warn" class="org.apache.log4j.DailyRollingFileAppender">
		<!-- 文件路径 -->
		<param name="File" value="${catalina.home}/logs/platform/warn.log" />
		<!-- 是否追加 -->
		<param name="Append" value="true" />
		<!-- 最低日志级别 -->
		<param name="Threshold" value="WARN" />
		<!-- 回滚日志后缀 -->
		<param name="datePattern" value="'.'yyyy-MM-dd" />
		<!-- 是否启用缓冲 当缓冲区数据达到一定大小再写入文件 默认8K -->
		<!-- <param name="BufferedIO" value="true"/> <param name="BufferSize" value="8192"/> -->
		<!-- 日志输出布局 -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-d{yyyy-MM-dd HH:mm:ss} [%p] [%c.%M:%L] %m%n" />
		</layout>
		<!--限制输出级别 -->
		<filter class="org.apache.log4j.varia.LevelRangeFilter">
			<!-- 最小级别 -->
			<param name="LevelMax" value="WARN" />
			<!-- 最大级别 -->
			<param name="LevelMin" value="WARN" />
		</filter>
	</appender>

	<!-- error级别日志控制 -->
	<appender name="error" class="org.apache.log4j.DailyRollingFileAppender">
		<!-- 文件路径 -->
		<param name="File" value="${catalina.home}/logs/platform/error.log" />
		<!-- 是否追加 -->
		<param name="Append" value="true" />
		<!-- 最低日志级别 -->
		<param name="Threshold" value="ERROR" />
		<!-- 回滚日志后缀 -->
		<param name="datePattern" value="'.'yyyy-MM-dd" />
		<!-- 是否启用缓冲 当缓冲区数据达到一定大小再写入文件 默认8K -->
		<!-- <param name="BufferedIO" value="true"/> <param name="BufferSize" value="8192"/> -->
		<!-- 日志输出布局 -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-d{yyyy-MM-dd HH:mm:ss} [%p] [%c.%M:%L] %m%n" />
		</layout>
		<!--限制输出级别 -->
		<filter class="org.apache.log4j.varia.LevelRangeFilter">
			<!-- 最小级别 -->
			<param name="LevelMax" value="ERROR" />
			<!-- 最大级别 -->
			<param name="LevelMin" value="ERROR" />
		</filter>
	</appender>

	<!-- 发送日志文件到邮件 -->
	<appender name="email" class="org.core.log4j.SMTPAppender">
		<!-- 最小输出日志级别 -->
		<param name="Threshold" value="ERROR" />
		<!-- 缓冲Event个数默认512 当达到了多少个就覆盖以前的Event 而非网络上所说的缓冲数据大小 不看源码坑出血 -->
		<param name="BufferSize" value="512" />
		<!-- 错误个数默认一个 即出现错误就发送邮件 -->
		<param name="ErrorSize" value="5" />
		<!-- 发送邮件的协议类型 QQ使用smtps加密 163使用smtp -->
		<param name="SMTPProtocol" value="smtps" />
		<!-- 发送端口 QQ使用465 163使用25 -->
		<param name="SMTPPort" value="465" />
		<!-- 发送日志邮箱SMTP -->
		<param name="SMTPHost" value="smtp.qq.com" />
		<!-- 发送日志的邮箱 -->
		<param name="From" value="mrliugangqiang@foxmail.com" />
		<!-- 发送日志的邮箱用户名 -->
		<param name="SMTPUsername" value="mrliugangqiang@foxmail.com" />
		<!-- 发送日志的邮箱密码 -->
		<param name="SMTPPassword" value="ikkjubiqfhimbahe" />
		<!-- 日志邮件主题 -->
		<param name="Subject" value="Platform项目异常通知" />
		<!-- 日志邮件接收者 -->
		<param name="To" value="liu.gangqiang@kst-health.com" />
		<!-- 抄送邮件接受者 -->
		<!-- <param name="Bcc" value="zhao.fei@kst-health.com,chen.yan@kst-health.com,gong.yiyang@kst-health.com,wang.huaqiang@kst-health.com,zhang.xiangzheng@kst-health.com" /> -->
		<!-- 日志输出布局 -->
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-d{yyyy-MM-dd HH:mm:ss} [%p] [%c.%M:%L] %m%n" />
		</layout>
	</appender>

	<!-- 异步发送邮件设置 -->
	<appender name="asyncout" class="org.apache.log4j.AsyncAppender">
		<appender-ref ref="email" />
	</appender>

	<!-- 需要特殊处理的日志级别 -->
	<logger name="org.springframework">
		<level value="info" />
	</logger>
	<logger name="org.system">
		<level value="debug" />
	</logger>

	<!-- 根路径设置 -->
	<root>
		<level value="info" />
		<appender-ref ref="console" />
		<appender-ref ref="info" />
		<appender-ref ref="warn" />
		<appender-ref ref="error" />
		<appender-ref ref="asyncout" />
	</root>

</log4j:configuration>